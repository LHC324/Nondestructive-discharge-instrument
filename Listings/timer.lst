C51 COMPILER V9.60.0.0   TIMER                                                             08/03/2022 21:14:10 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\timer.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Inc;.\SmallRTOS\Inc)
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) OBJECT(.\Objects\timer.obj)

line level    source

   1          #include "timer.h"
   2          
   3          static void TIM_Base_MspInit(TIM_HandleTypeDef *const tim_baseHandle);
   4          // TIMERS Timer_Group[TIMER_EVENTS];
   5          TIM_HandleTypeDef Timer0;
   6          
   7          /*********************************************************
   8           * 函数名： Timer0_Init()
   9           * 功能：   定时器0 的初始化设置
  10           * 参数：   无
  11           * 作者：   LHC
  12           * note：
  13           *                 定时器2、3、4均工作在16bit自动重载模式
  14           **********************************************************/
  15          /*禁止编译器优化该模块*/
  16          #pragma OPTIMIZE(0)
  17          
  18          void Timer0_Init(void)
  19          {
  20   1              Timer0.Instance = TIMER0;
  21   1              /*12T模式*/
  22   1              Timer0.AUXR_Reg.AUXR.AUXR_U8 = 0x7F; // T0X12
  23   1              Timer0.TMOD_Reg.TMOD.TMOD_U8 = 0xF0; // T0_AutoReload_16bit
  24   1              Timer0.Timer_Count = (COUNTMAX - (T12_MODE));
  25   1              /*定时器0优先级为00，最低优先级*/
  26   1              Timer0.Timer_NVIC.IP_Reg.IP.IP_U8 = 0x00;
  27   1              Timer0.Timer_NVIC.IPH_Reg.IPH.IPH_U8 = 0x00;
  28   1              /*开启定时器0中断*/
  29   1              Timer0.IE_Reg.IE.IE_U8 = true;
  30   1              /*开启定时器0*/
  31   1              Timer0.TCON_Reg.TCON.TCON_U8 = true;
  32   1              TIM_Base_MspInit(&Timer0);
  33   1      }
  34          
  35          void TIM_Base_MspInit(TIM_HandleTypeDef *const tim_baseHandle)
  36          { /*首次初始化，把TMOD和AUXR全部置零*/
  37   1              switch (tim_baseHandle->Instance)
  38   1              {
  39   2              case TIMER0:
  40   2              {
  41   3                      AUXR &= tim_baseHandle->AUXR_Reg.AUXR.AUXR_U8;
  42   3                      /*模式0*/
  43   3                      TMOD &= tim_baseHandle->TMOD_Reg.TMOD.TMOD_U8;
  44   3                      /*65536-11.0592M/12/1000 */
  45   3                      TL0 = (uint8_t)(tim_baseHandle->Timer_Count);
  46   3                      TH0 = (uint8_t)((tim_baseHandle->Timer_Count) >> 8);
  47   3                      IP |= tim_baseHandle->Timer_NVIC.IP_Reg.IP.IP_U8;
  48   3                      IPH |= tim_baseHandle->Timer_NVIC.IPH_Reg.IPH.IPH_U8;
  49   3                      /*使能定时器中断*/
  50   3                      ET0 = tim_baseHandle->IE_Reg.IE.IE_U8;
  51   3                      /*启动定时器0*/
  52   3                      TR0 = tim_baseHandle->TCON_Reg.TCON.TCON_U8;
  53   3                      /*T0溢出中断清零*/
  54   3                      TF0 = 0;
C51 COMPILER V9.60.0.0   TIMER                                                             08/03/2022 21:14:10 PAGE 2   

  55   3              }
  56   2              break;
  57   2              default:
  58   2                      break;
  59   2              }
  60   1      }
  61          
  62          #if !defined(USING_RTOS)
  63          /*定时器0的中断服务函数*/
  64          void Timer0_ISR() interrupt 1
  65          {
  66   1              data uint8_t e = 0;
  67   1      
  68   1              for (e = 0; e < g_TimerNumbers; e++)
  69   1              {
  70   2                      if (Timer_Group[e].enable == true) //使能
  71   2                      {
  72   3                              Timer_Group[e].timercnt++;
  73   3                              if (Timer_Group[e].timercnt == Timer_Group[e].targetcnt)
  74   3                              {
  75   4                                      Timer_Group[e].execute_flag = true;
  76   4                                      Timer_Group[e].timercnt = 0U;
  77   4                              }
  78   3                      }
  79   2              }
  80   1      
  81   1      #define UART_FRAME_SET____________________________________
  82   1              {
  83   2                      /*通用串口数据帧裁定机制*/
  84   2      #include "usart.h"
  85   2                      idata Uart_HandleTypeDef *puart = Uart_Group;
  86   2      
  87   2                      for (; puart && (puart < Uart_Group + UART_GROUP_SIZE()); puart++)
  88   2                      {
  89   3                              // __GET_FLAG(puart->Rx.flag, Start_Flag) ? !puart->Rx.over_time
  90   3                              //      ? __RESET_FLAG(puart->Rx.flag, Start_Flag),
  91   3                              //      __SET_FLAG(puart->Rx.flag, Finish_Flag)
  92   3                              //      : (puart->Rx.over_time--)
  93   3                              //      : false;
  94   3                              if (__GET_FLAG(puart->Rx.flag, Start_Flag))
  95   3                              {
  96   4                                      if (puart->Rx.over_time)
  97   4                                      {
  98   5                                              puart->Rx.over_time--;
  99   5                                      }
 100   4                                      else
 101   4                                      {
 102   5                                              __RESET_FLAG(puart->Rx.flag, Start_Flag),
 103   5                                                      __SET_FLAG(puart->Rx.flag, Finish_Flag);
 104   5                                      }
 105   4                              }
 106   3                      }
 107   2              }
 108   1      }
 109          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    744    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   TIMER                                                             08/03/2022 21:14:10 PAGE 3   

   DATA SIZE        =      1    ----
   IDATA SIZE       =      3    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
